(define atom?
    (lambda (x)
      (and (not (pair? x)) (not (null? x)))))

(define lat?
 (lambda (l)
    (cond ((null? l) #t)
          ((atom? (car l)) (lat? (cdr l)))
          (else #f))))


(define member?
    (lambda(a lat)
        (cond
            ((null? lat) #f)
            (else (or (eq? (car lat) a)
            (member? a (cdr lat))))
        )
    )
)

(define rember1
    (lambda (a lat)
        (cond 
            ((null? lat) (quote ()))
            (else 
                (cond
                    ((eq? (car lat) a) (cdr lat))
                    (else (cons (car lat)
                        (rember1 a
                               (cdr lat)
                        )
                    ))
                )
            )
        )
    )
)

(define insertR
    (lambda (new old lat)
        (cond
            ((null? lat) (quote()))
            (else
                (cond
                    ((eq? (car lat) old) 
                        (cons
                            new
                            (cdr lat)))
                    (else
                        (cons
                            (car lat)
                            (insertR new old (cdr lat))
                        )
                    )
                )
            )
        )
    )
) 

(define insertL
    (lambda (new old lat)
        (cond
            ((null? lat) (quote()))
            (else
                (cond
                    ((eq? (car lat) old) 
                        (cons
                            new
                            (cons 
                                old 
                                (cdr lat))))
                    (else
                        (cons
                            (car lat)
                            (insertL new old (cdr lat))
                        )
                    )
                )
            )
        )
    )
) 

(insertL new old l)
;(ice cream with topping fudge for dessert)

(define subst
    (lambda (new old lat)
        (cond
            ((null? lat) (quote()))
            (else
                (cond
                    ((eq? (car lat) old) 
                        (cons
                            new
                            (cdr lat)))
                    (else
                        (cons
                            (car lat)
                            (subst new old (cdr lat))
                        )
                    )
                )
            )
        )
    )
) 

(define subst2
    (lambda (new o1 o2 lat)
        (cond
            ((null? lat) (quote()))
            (else   (cond
                        ((or (eq? (car lat) o1) (eq? (car lat) o2)) (cons new (cdr lat)))
                        ;((eq? (car lat) o1) (cons new (cdr lat)))
                        ;((eq? (car lat) o2) (cons new (cdr lat)))
                        (else (cons (car lat)
                            (subst2 new o1 o2 (cdr lat)))
                        )
                    )
            )
        )
    )
) 
(define l '(banana ice cream with chocolate for dessert))
(define new 'vanilla)
(define o1 'chocolate)
(define o2 'banana)
(subst2 new o1 o2 l)

(define multirember
    (lambda (a lat)
        (cond
            ((eq? (car lat)) (quote()))
            (else
                (cond
                    ( (eq? (car lat) a) (multirember a (cdr lat)))
                )
            )
        )
    )
)

(define add1
    (lambda (n)
        (+ n 1)))

(define sub1
    (lambda (n)
        (- n 1)))

(zero? 0)

(define o+
    (lambda (n m)
        (cond
            ((zero? m) n)
            (else (add1 (o+ n (sub1 m)))))))
            
(define o-
    (lambda (n m)
        (cond
            ((zero? m) n)
            (else (sub1 (o- n (sub1 m)))))))

(define addtup
(lambda (tup)
    (cond 
        ((null? tup) 0)
        (else (o+ (car tup) (addtup (cdr tup)))))))

(define t '(1 2 3 4 5))
(addtup t) ; 15        

(define x
    (lambda (n m)
        (cond 
        ((zero? m) 0)
        (else (o+ n (x n (sub1 m)))))))

(define tup+
    (lambda (tup1 tup2)
        (cond
            ((and (null? tup1) (null? tup2)) (quote()))
            (else
                (cons (o+ (car tup1) (car tup2))
                    (tup+ (cdr tup1) (cdr tup2)))))))

(define t1 '(1 2 3))
(define t2 '(10 20 30))
(tup+ t1 t2)

(define tup+
    (lambda (tup1 tup2)
        (cond
            ((null? tup1) tup2)
            ((null? tup2) tup1)
            (else
                (cons (o+ (car tup1) (car tup2))
                    (tup+ (cdr tup1) (cdr tup2)))))))

(> 11 111) ;#f
(> 110 1) ;#t

(define >
    (lambda (n m)
        (cond
            ((zero? n) #f)
            ((zero? m) #t)
            (else (> (sub1 n) (sub1 m))))))
(> 3 3);#f

(define <
    (lambda (n m)
        (cond
            ((zero? m) #f)
            ((zero? n) #t)
            (else (< (sub1 n) (sub1 m))))))            
(< 1 1) ;#f

(define =
    (lambda (n m)
        (cond
            ((> n m) #f)
            ((< n m) #f)
            (else #t))))

(define ^
    (lambda (n m)
        (cond
            ((zero? m) 1)
            (else (x n (^ n (sub1 m)))))))



(quotient 15 4) ;3

(define qu
    (lambda (n m)
        (cond
            ((< n m) 0)
            (else (add1 (qu (o- n m) m)))
        )
    )
)